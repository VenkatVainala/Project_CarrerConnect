{"ast":null,"code":"import axios from 'axios';\nconst AUTH_URL = 'http://localhost:5000/api/auth';\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// New Jobicy API configuration for remote jobs\nconst JOBICY_BASE_URL = 'https://jobicy.p.rapidapi.com/api/v2/remote-jobs';\nconst RAPIDAPI_KEY = 'b9fa4a9482msh0051404b674a43fp1398fajsn5decfeb2d616';\nconst RAPIDAPI_HOST = 'jobicy.p.rapidapi.com';\n\n// --- Existing functions ---\n\nexport const registerUser = async userData => {\n  try {\n    const response = await axios.post(`${AUTH_URL}/register`, userData);\n    return response.data;\n  } catch (error) {\n    throw error.response.data;\n  }\n};\nexport const loginUser = async userData => {\n  try {\n    const response = await axios.post(`${AUTH_URL}/login`, userData);\n    return response.data;\n  } catch (error) {\n    throw error.response.data;\n  }\n};\n\n// Updated getRemoteJobs using the new Jobicy endpoint\nexport const getRemoteJobs = async () => {\n  try {\n    const response = await axios.get(JOBICY_BASE_URL, {\n      headers: {\n        'x-rapidapi-key': RAPIDAPI_KEY,\n        'x-rapidapi-host': RAPIDAPI_HOST\n      }\n    });\n    // Adjust this based on Jobicy's response structure.\n    // For example, if the jobs are inside response.data.data:\n    return response.data.data;\n  } catch (error) {\n    console.error('Error fetching remote jobs from Jobicy:', error);\n    throw error;\n  }\n};\nexport const getUserProfile = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/profile`, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching profile:', error);\n    throw error;\n  }\n};\nexport const updateUserProfile = async formData => {\n  try {\n    const response = await axios.put(`${API_BASE_URL}/profile`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error updating profile:', error);\n    throw error;\n  }\n};\n\n// --- New functions for RapidAPI endpoints (unchanged) ---\n// 1. Estimated Salary Endpoint\nexport const getEstimatedSalary = async (job_title = 'nodejs developer', location = 'new york', location_type = 'ANY', years_of_experience = 'ALL') => {\n  try {\n    const response = await axios.get(`https://jsearch.p.rapidapi.com/estimated-salary`, {\n      params: {\n        job_title,\n        location,\n        location_type,\n        years_of_experience\n      },\n      headers: {\n        'x-rapidapi-key': RAPIDAPI_KEY,\n        'x-rapidapi-host': 'jsearch.p.rapidapi.com'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching estimated salary:', error);\n    throw error;\n  }\n};\n\n// 2. Job Details Endpoint\nexport const getJobDetails = async (job_id, country = 'us') => {\n  try {\n    const response = await axios.get(`https://jsearch.p.rapidapi.com/job-details`, {\n      params: {\n        job_id,\n        country\n      },\n      headers: {\n        'x-rapidapi-key': RAPIDAPI_KEY,\n        'x-rapidapi-host': 'jsearch.p.rapidapi.com'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching job details:', error);\n    throw error;\n  }\n};\n\n// 3. Company Job Salary Endpoint\nexport const getCompanyJobSalary = async (company = 'Amazon', job_title = 'software developer', location_type = 'ANY', years_of_experience = 'ALL') => {\n  try {\n    const response = await axios.get(`https://jsearch.p.rapidapi.com/company-job-salary`, {\n      params: {\n        company,\n        job_title,\n        location_type,\n        years_of_experience\n      },\n      headers: {\n        'x-rapidapi-key': RAPIDAPI_KEY,\n        'x-rapidapi-host': 'jsearch.p.rapidapi.com'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching company job salary:', error);\n    throw error;\n  }\n};\n\n// Backend Proxy Function for Estimated Salary (if needed)\nexport const getEstimatedSalaryFromBackend = async (job_title, location, location_type = 'ANY', years_of_experience = 'ALL') => {\n  try {\n    const response = await axios.get(`http://localhost:5000/api/salary/estimated-salary`, {\n      params: {\n        job_title,\n        location,\n        location_type,\n        years_of_experience\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching estimated salary from backend:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","AUTH_URL","API_BASE_URL","JOBICY_BASE_URL","RAPIDAPI_KEY","RAPIDAPI_HOST","registerUser","userData","response","post","data","error","loginUser","getRemoteJobs","get","headers","console","getUserProfile","Authorization","localStorage","getItem","updateUserProfile","formData","put","getEstimatedSalary","job_title","location","location_type","years_of_experience","params","getJobDetails","job_id","country","getCompanyJobSalary","company","getEstimatedSalaryFromBackend"],"sources":["C:/Users/Venkat/CareerConnect/frontend/src/pages/Jobs/JobListingPage.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst AUTH_URL = 'http://localhost:5000/api/auth';\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n// New Jobicy API configuration for remote jobs\r\nconst JOBICY_BASE_URL = 'https://jobicy.p.rapidapi.com/api/v2/remote-jobs';\r\nconst RAPIDAPI_KEY = 'b9fa4a9482msh0051404b674a43fp1398fajsn5decfeb2d616';\r\nconst RAPIDAPI_HOST = 'jobicy.p.rapidapi.com';\r\n\r\n// --- Existing functions ---\r\n\r\nexport const registerUser = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${AUTH_URL}/register`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response.data;\r\n  }\r\n};\r\n\r\nexport const loginUser = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${AUTH_URL}/login`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error.response.data;\r\n  }\r\n};\r\n\r\n// Updated getRemoteJobs using the new Jobicy endpoint\r\nexport const getRemoteJobs = async () => {\r\n  try {\r\n    const response = await axios.get(JOBICY_BASE_URL, {\r\n      headers: {\r\n        'x-rapidapi-key': RAPIDAPI_KEY,\r\n        'x-rapidapi-host': RAPIDAPI_HOST,\r\n      },\r\n    });\r\n    // Adjust this based on Jobicy's response structure.\r\n    // For example, if the jobs are inside response.data.data:\r\n    return response.data.data;\r\n  } catch (error) {\r\n    console.error('Error fetching remote jobs from Jobicy:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const getUserProfile = async () => {\r\n  try {\r\n    const response = await axios.get(`${API_BASE_URL}/profile`, {\r\n      headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching profile:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const updateUserProfile = async (formData) => {\r\n  try {\r\n    const response = await axios.put(`${API_BASE_URL}/profile`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n        Authorization: `Bearer ${localStorage.getItem('token')}`,\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error updating profile:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// --- New functions for RapidAPI endpoints (unchanged) ---\r\n// 1. Estimated Salary Endpoint\r\nexport const getEstimatedSalary = async (\r\n  job_title = 'nodejs developer',\r\n  location = 'new york',\r\n  location_type = 'ANY',\r\n  years_of_experience = 'ALL'\r\n) => {\r\n  try {\r\n    const response = await axios.get(`https://jsearch.p.rapidapi.com/estimated-salary`, {\r\n      params: { job_title, location, location_type, years_of_experience },\r\n      headers: {\r\n        'x-rapidapi-key': RAPIDAPI_KEY,\r\n        'x-rapidapi-host': 'jsearch.p.rapidapi.com',\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching estimated salary:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 2. Job Details Endpoint\r\nexport const getJobDetails = async (job_id, country = 'us') => {\r\n  try {\r\n    const response = await axios.get(`https://jsearch.p.rapidapi.com/job-details`, {\r\n      params: { job_id, country },\r\n      headers: {\r\n        'x-rapidapi-key': RAPIDAPI_KEY,\r\n        'x-rapidapi-host': 'jsearch.p.rapidapi.com',\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching job details:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 3. Company Job Salary Endpoint\r\nexport const getCompanyJobSalary = async (\r\n  company = 'Amazon',\r\n  job_title = 'software developer',\r\n  location_type = 'ANY',\r\n  years_of_experience = 'ALL'\r\n) => {\r\n  try {\r\n    const response = await axios.get(`https://jsearch.p.rapidapi.com/company-job-salary`, {\r\n      params: { company, job_title, location_type, years_of_experience },\r\n      headers: {\r\n        'x-rapidapi-key': RAPIDAPI_KEY,\r\n        'x-rapidapi-host': 'jsearch.p.rapidapi.com',\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching company job salary:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Backend Proxy Function for Estimated Salary (if needed)\r\nexport const getEstimatedSalaryFromBackend = async (\r\n  job_title,\r\n  location,\r\n  location_type = 'ANY',\r\n  years_of_experience = 'ALL'\r\n) => {\r\n  try {\r\n    const response = await axios.get(`http://localhost:5000/api/salary/estimated-salary`, {\r\n      params: { job_title, location, location_type, years_of_experience },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Error fetching estimated salary from backend:', error);\r\n    throw error;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}